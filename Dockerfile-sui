# Dockerfile

# Stage 1: Build the frontend
# This stage fetches the source code and builds the static web assets.
FROM --platform=$BUILDPLATFORM node:alpine AS front-builder

# Install git in the container, which is required to clone the repository.
RUN apk add --no-cache git

WORKDIR /app

# Clone the repository and ALL its submodules (--recursive is key).
# The final '.' tells git to clone into the current directory (/app).
RUN git clone --recursive https://github.com/alireza0/s-ui.git .

# Move into the frontend directory to run npm commands.
WORKDIR /app/frontend

# Install dependencies and build the frontend.
RUN npm install && npm run build


# Stage 2: Build the backend Go application
FROM golang:1.25-alpine AS backend-builder
WORKDIR /app
ARG TARGETARCH
ENV CGO_ENABLED=1
ENV CGO_CFLAGS="-D_LARGEFILE64_SOURCE"
ENV GOARCH=$TARGETARCH

RUN apk update && apk add --no-cache \
    gcc \
    musl-dev \
    libc-dev \
    make \
    git \
    wget \
    unzip \
    bash

ENV CC=gcc

# Copy the ENTIRE cloned source code from the first stage.
COPY --from=front-builder /app/ .

# Copy the built frontend assets from the first stage into the correct web directory.
# The source path is /app/frontend/dist because we ran the build inside that folder.
COPY --from=front-builder /app/frontend/dist/ /app/web/html/

# Build the Go binary.
RUN go build -ldflags="-w -s" \
    -tags "with_quic,with_grpc,with_utls,with_acme,with_gvisor" \
    -o sui main.go


# Stage 3: Create the final, minimal production image
FROM --platform=$TARGETPLATFORM alpine
LABEL org.opencontainers.image.authors="alireza7@gmail.com"
ENV TZ=Asia/Tehran
WORKDIR /app
RUN apk add --no-cache --update ca-certificates tzdata

# Copy the compiled Go binary from the backend